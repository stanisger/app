'use strict'

var babel = require('babel'),
    fs = require('fs'),
    async = require('async'),
    colors = require('colors/safe')

var REGEX_EXTENSION = /.*\.(js|jsx)$/g,
    IGNORE_FILES = ['compile.js', 'gulpfile.js'],
    IGNORE_FOLDERS = ['node_modules', '.idea', '.git', 'bin'],
    LOG_TAG = colors.black.bgYellow('[babelfy]'),
    DIR_NEW_FILES = 'bin'

//TODO: Constants FILES_DONT_TOUCH, FOLDERS_DONT_TOUCH. IGNORE_* should be copied

var _log = function (msg, obj) {
    if (!!obj) return console.log(LOG_TAG, colors.yellow(new Date().toString()), colors.yellow(msg), obj)

    return console.log(LOG_TAG, colors.yellow(new Date().toString()), colors.yellow(msg))
}

var _err = function (err) {
    console.log(colors.red(err.stack))
}

//TODO: Make it async.
//NOTE FOR ME IN THE FUTURE: the cb param may be called multiple times
var readDir = function (dir, cb) {
    var dirs = [],
        root = fs.readdirSync(dir)

    root.forEach(function (path) {
        if (fs.statSync(dir + '/' + path).isDirectory() && IGNORE_FOLDERS.indexOf(path) == -1)
            dirs.push(dir + '/' + path)
    })

    dirs.slice(0).forEach(function (path) {
        if (fs.statSync(path).isDirectory() && IGNORE_FOLDERS.indexOf(path) == -1)
            dirs = dirs.concat(readDir(path))
    })

    dirs.push(dir)

    return dirs
}

var findFiles = function (dir) {
    var dirFiles = fs.readdirSync(dir),
        files = []

    dirFiles.forEach(function (file) {
        if (!fs.statSync(dir + '/' + file).isDirectory() && IGNORE_FILES.indexOf(file) == -1 && file.match(REGEX_EXTENSION))
            files.push(dir + '/' + file)
    })

    return files
}

module.exports.main = function (args) {
    var files = []

    readDir(args[0]).forEach(function (dir) {
        //_log('reading dir: ' + dir)
        var dirFiles = findFiles(dir)
        //_log('files:', dirFiles)
        files = files.concat(dirFiles)
    })

    _log('[=========starting transforms=========]')

    var tasks = []

    files.forEach(function (file) {
        tasks.push(function (cb) {
            babel.transformFile(file, function (err, result) {
                if (err) return _err(err)

                var newDir = args[0] + '/' + DIR_NEW_FILES + file.replace(args[0], '')

                fs.writeFile(newDir, result.code, function (err) {
                    console.log('\n')
                    _log('trying to writie as ES5: ' + newDir)

                    if (err) return cb(err)

                    _log(file + ': success')
                    cb()
                })
            })
        })
    })

    async.parallel(tasks, function (err) {
        if (err) return _err(err)

        process.exit()
    })
}